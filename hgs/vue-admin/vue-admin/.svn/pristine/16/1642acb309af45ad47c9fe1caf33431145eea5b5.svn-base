import axios from 'axios';
import config from './config.js';
import qs from "qs";
import { Loading, Message } from "element-ui";
// import router from "../../router";
let loadingInstance;
let timer = 1000;
let errcallback;
// POST传参序列化(添加请求拦截器)
axios.interceptors.request.use(
  config => {
    // 在发送请求之前做某件事
    if (config.method === "post") {
      // 序列化
      config.data = qs.stringify({
        branch: "1001",
        channel: '1',
        ...config.data
      });
    }

    // 若是有做鉴权token , 就给头部带上token
    // 若是需要跨站点,存放到 cookie 会好一点,限制也没那么多,有些浏览环境限制了 localstorage 的使用
    if (localStorage.token) {
      config.headers.Authorization = localStorage.token;
    }
    return config;
  },
  error => {
    // error 的回调信息,看自己的定义
    Message({
      //  饿了么的消息弹窗组件,类似toast
      showClose: true,
      message: error,
      type: "error"
    });
    return Promise.reject(error);
  }
);

// 返回状态判断(添加响应拦截器)
axios.interceptors.response.use(
  res => {
    setTimeout(() => {
      loadingInstance && loadingInstance.close();
    }, timer);
    // 对响应数据做些事
    if (res.data.code && res.data.code != "000000" && res.data.code != "999999" && !errcallback) {
      Message({ //  饿了么的消息弹窗组件,类似toast
        showClose: true, message: res.data.message, type: "error" });
      return Promise.reject(res.data.message);
    }
    return res;
  }
  /*  error => {
    // 用户登录的时候会拿到一个基础信息,比如用户名,token,过期时间戳
    // 直接丢localStorage或者sessionStorage
    if (!window.localStorage.getItem("loginUserBaseInfo")) {
      // 若是接口访问的时候没有发现有鉴权的基础信息,直接返回登录页
      router.push({
        path: "/login"
      });
    } else {
      // 若是有基础信息的情况下,判断时间戳和当前的时间,若是当前的时间大于服务器过期的时间
      // 乖乖的返回去登录页重新登录
      let lifeTime =
        JSON.parse(window.localStorage.getItem("loginUserBaseInfo")).lifeTime *
        timer;
      let nowTime = new Date().getTime(); // 当前时间的时间戳
      console.log(nowTime, lifeTime);
      console.log(nowTime > lifeTime);
      if (nowTime > lifeTime) {
        Message({
          showClose: true,
          message: "登录状态信息过期,请重新登录",
          type: "error"
        });
        router.push({
          path: "/login"
        });
      } else {
        // 下面是接口回调的satus ,因为我做了一些错误页面,所以都会指向对应的报错页面
        if (error.response.status === 403) {
          router.push({
            path: "/error/403"
          });
        }
        if (error.response.status === 500) {
          router.push({
            path: "/error/500"
          });
        }
        if (error.response.status === 502) {
          router.push({
            path: "/error/502"
          });
        }
        if (error.response.status === 404) {
          router.push({
            path: "/error/404"
          });
        }
      }
    }
    // 返回 response 里的错误信息
    let errorInfo = error.data.error ? error.data.error.message : error.data;
    return Promise.reject(errorInfo);
  } */
);

/**
 * @description 封装了axios的调用方式，得到的直接是接口返回的数据，对于code
 * 这里做了判断
 * @author 刘欢
 * @class API
 */

class API {
  constructor() {
    this.url = "";
    this.data = {};
    this.callback = "";
    this.method = "post";
    this.isLoading = true;
  }
  sendRequest(params) {
    this.url = params.url || "";
    this.data = params.data || {};
    errcallback = params.errcallback || "";
    this.callback = params.callback || "";
    this.method = params.method || "post";
    this.isLoading = params.isLoading || true;
    if (this.isLoading) {
      loadingInstance = Loading.service();
    }
    if (this.method == "get") {
      this.get();
      return null;
    }
    this.post();
  }

  get() {}

  post() {
    config.data = this.data
    return axios
      .post(`${this.url}.do`, this.data, config)
      .then(res => {
        setTimeout(() => {
          loadingInstance && loadingInstance.close();
        }, timer);
        let rst = res.data;
        if (rst.code === "000000" || rst.code === "999999") {
          this.callback && this.callback(rst.result || {});
        } else {
          setTimeout(() => {
            loadingInstance && loadingInstance.close();
          }, timer);
          errcallback && errcallback(rst.message || {});
          this.massages = rst.message;
        }
      })
      .catch(e => {
        console.log(e);
      });
  }
}
const http = new API()

export default {
  install: (Vue, Option) => {
    Object.defineProperty(Vue.prototype, "$http", { value: http });
  }
};
